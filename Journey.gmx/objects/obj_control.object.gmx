<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global Variables

/*========================================
  1.   I N P U T
========================================*/

globalvar key_right, key_left, key_up, key_down, key_A, key_B;
globalvar key_right_p, key_left_p, key_up_p, key_down_p, key_A_p, key_B_p;

// key is down

key_right = 0;
key_left = 0;
key_up = 0;
key_down = 0;

key_A = 0;
key_B = 0;

// key pressed

key_right_p = 0;
key_left_p = 0;
key_up_p = 0;
key_down_p = 0;

key_A_p = 0;
key_B_p = 0;


/*========================================
  2.   L E V E L   S T U F F
========================================*/

globalvar grav;
grav = 0.15;

globalvar wait;
wait = 0;

globalvar pause;
pause = 0;

globalvar mute;
mute = 0;

// weird stuff

globalvar default_width;
default_width = room_width;
globalvar default_height;
default_height = room_height;

globalvar VXA, VXB, VYA, VYB;

VXA = room_width/2-default_width;
VXB = VXA + default_width*2;

VYA = room_height/2-default_height;
VYB = VYA + default_height*2;


// Timer Variables

time = 20 * 60


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Map Variables

map_size = 0;
map_type = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// object activation check
/*
instance_deactivate_all(true);
instance_activate_object(obj_player);
instance_activate_region(view_xview[0] , view_yview[0]  , view_wview[0] , view_hview[0] , true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// input check!!! muy importante

key_left_previous = key_left;
key_right_previous = key_right;
key_up_previous = key_up;
key_down_previous = key_down;

key_left = 0;
key_right = 0;
key_up = 0;
key_down = 0;

if(keyboard_check(ord("A")) or keyboard_check(vk_left) or gamepad_axis_value(0,gp_axislh)&lt;-0.3) key_left = 1;
if(keyboard_check(ord("D")) or keyboard_check(vk_right) or gamepad_axis_value(0,gp_axislh)&gt;0.3) key_right = 1;
if(keyboard_check(ord("W")) or keyboard_check(vk_up) or gamepad_axis_value(0,gp_axislv)&lt;-0.3) key_up = 1;
if(keyboard_check(ord("S")) or keyboard_check(vk_down) or gamepad_axis_value(0,gp_axislv)&gt;0.3) key_down = 1;

key_left_p = (key_left and !key_left_previous);
key_right_p = (key_right and !key_right_previous);
key_up_p = (key_up and !key_up_previous);
key_down_p = (key_down and !key_down_previous);

key_A = 0;
key_A_p = 0;

if(keyboard_check(vk_space) or keyboard_check(vk_control) or gamepad_button_check(0,gp_shoulderlb) or key_up) key_A = 1;
if(keyboard_check_pressed(vk_space) or keyboard_check_pressed(vk_control) or gamepad_button_check_pressed(0,gp_shoulderlb) or key_up_p) key_A_p = 1;

key_B = 0;
key_B_p = 0;

if(keyboard_check(ord("R")) or keyboard_check(vk_shift) or gamepad_button_check(0,gp_face3)) key_B = 1;
if(keyboard_check_pressed(ord("R")) or keyboard_check_pressed(vk_shift) or gamepad_button_check_pressed(0,gp_face3)) key_B_p = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timing Check

//if time &lt;= 0 {
/*
if !instance_exists(xp_orb_obj) {

    room_restart();

// function that start a new instance/room/universe...

    //f_new_world();




}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time

time -= 1/room_speed;

minutes = time div 60;
seconds = time mod 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// room creation... grid creation?

randomize()


// decide what type of room it is going to be



map_type = ceil(random(1));

 switch(map_type){
    
    case 1:
        map_size = ceil(random_range(20,200));
        
        spread = ceil(random_range(map_size/2, map_size ));
        
        map_size = (map_size*20) 
        
        map_size_n = (map_size) div 64
        
        map_size_n +=  (4 - map_size_n mod 4)
        
        room_width = map_size 
        room_height = map_size
        
        for(var _i = 0; _i &lt; map_size_n; _i++){
            for(var _j = 0; _j&lt; map_size_n; _j++){
            grid[_i,_j] = 1;
            
          if _i mod 4 == 0 &amp;&amp; _j mod 4 == 0{
                tile_add(bkg_6, 0, 0, 256, 256, (_i - _j)*32+ room_width/2  -128, (_i + _j)*16+ room_height/4, -(y+20)/room_height);
               }
            }
            
        }

        for(var k = 0; k&lt;map_size; k++){
        
           // f_remove_grid(1);
 
            }
            
        f_spawn(obj_player, 1, 1);
        
        // f_spawn(xp_orb_obj, 1, 1);
        
        f_spawn(obj_enemy, 1, spread/2);

            
     //spawn player     
    
        

        break;
    case 2:
        break;
 
    }

    //theme
    //size
    // etc???
    
    

//generate objects and flavour of room



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Surfact attempts &amp; particles
/*
instance_create(room_width/2, room_height/2,obj_particles1);

surf_main = surface_create(view_wview,view_hview);


  surface_main = surface_create(view_wview,view_hview);
  
  surface_set_target(surface_main);
  surface_reset_target();
  //view_surface_id[0] = surface_main;
  //display_set_gui_size(view_wview,view_hview);
  
  
//surf_mask = surface_create(view_wview,view_hview);


//view stuff
/*
  view_xview = 0;
  view_yview = 0;
  view_wview[0] = 640;
  view_hview[0] = 360;
  //view_ratio = view_wview[0]/view_hview[0];
  view_wport[0] = 1280;
  view_hport[0] = 720;
  
 

  
  if(window_get_width() != view_wport or window_get_height() != view_hport){
    window_set_size(view_wport,view_hport);
    window_set_position(display_get_width()/2-view_wport/2, display_get_height()/2-view_hport/2);
  }
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view stuff?
/*
if !view_enabled
    {
    view_visible[0] = true;
    view_enabled = true;
    }
    
if !view_visible[0]
    {
    view_visible[0] = true;
    }

 view_wview[0] = 4000
 view_hview[0] = 2000
 
 view_wport[0] = 4000
 view_hport[0] = 2000
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drawing Timer and test debug


draw_set_colour(c_white);
draw_text(view_wview[0]/2,60, string(minutes) + ":" + string(seconds));

// debug

draw_text(view_wview[0]/2,100,string(obj_player.i) + ":" + string(obj_player.j));

draw_text(view_wview[0]/2,300, map_size_n);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///More Surfaces Attempts
/*

var ww = 800//display_get_gui_width();
var hh = 600//display_get_gui_height();

if(!surface_exists(surface_main)){

  surface_main = surface_create(room_width,room_height);
  view_surface_id[0] = surface_main;
  display_set_gui_size(view_wview,view_hview);

}

if (surface_exists(surface_main)){
  draw_set_blend_mode_ext(bm_one,bm_inv_src_alpha); // because of particles
  draw_surface_stretched(surface_main, 0, 0, ww, hh);
  draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
