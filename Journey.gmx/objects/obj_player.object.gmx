<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>kid_idle_4_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_moves</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Variables

image_xscale = 3*image_xscale
image_yscale = 3*image_yscale

// Movement Variables

h_spd = 0; // horizontal speed
v_spd = 0; // vertical speed

h_counter = 0; // used to store excess h_spd for smoothing
v_counter = 0;

h_acc = 0.55; // 0.15
v_acc = 0.55;


h_spd_aim = 6;


h_spd_aim_c = 6
v_spd_aim_c = 6

v_spd_aim = 6;


walk_counter = 0; // for audio



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement End

if j &gt; 0 &amp;&amp;  j &lt; obj_control.map_size_n &amp;&amp; i &lt; obj_control.map_size_n &amp;&amp;  i &gt; 0 {

 if obj_control.grid[i,j] = 1{

h_counter += h_spd;
v_counter += v_spd;

h = round(h_counter);
v = round(v_counter);

h_counter -= h;
v_counter -= v;


/*x+=2*h
y+=v*/

x += 2*xDir*3
y += yDir*3

}
else{ 
    h_spd = -h_spd
     v_spd = -v_spd
    }

}

else{ 
    h_spd = -h_spd
     v_spd = -v_spd
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement

depth = -y/room_height

xDir = key_right - key_left;
yDir = key_down - key_up;

h_dcc = h_acc//abs(h_spd)/6
v_dcc = v_acc//abs(v_spd)/6

  if((xDir == 0 &amp;&amp; yDir == 0)){ 
    h_spd = f_approach(h_spd, 0, h_dcc); 
    v_spd = f_approach(v_spd, 0, v_dcc);
    }
  
  if (xDir != 0 &amp;&amp; yDir != 0){ // if two axis are in use
      //horizontal movement  
      
      h_spd_aim = h_spd_aim_c 
      v_spd_aim = v_spd_aim_c

      h_spd = f_approach(h_spd, xDir*h_spd_aim, h_acc);
 // vertical movement 

      v_spd = f_approach(v_spd, yDir*v_spd_aim, v_acc);
  }
  
  if(xDir != 0 &amp;&amp; yDir == 0){// only one axis in use
  
    h_spd_aim = h_spd_aim_c *1.4
    v_spd_aim = v_spd_aim_c *1.4
  

      h_spd = f_approach(h_spd, xDir*h_spd_aim, h_acc);

    v_spd = f_approach(v_spd, 0, v_dcc);
  
  }
  if(yDir != 0 &amp;&amp; xDir == 0){
  
    h_spd_aim = h_spd_aim_c *1.4
    v_spd_aim = v_spd_aim_c *1.4
    

      v_spd = f_approach(v_spd, yDir*v_spd_aim, v_acc);

    h_spd = f_approach(h_spd, 0, h_dcc); 
  }

    
    
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Mapping

event_inherited()

 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// anim


    if xDir = 0 &amp;&amp; yDir = 0{
        
        if image_index == 0 image_speed = 1;
        else if image_index == 19 image_speed = -1;
    
        if sprite_index == kid_run_0_spr sprite_index = kid_idle_0_spr;
        else if sprite_index == kid_run_1_spr sprite_index = kid_idle_1_spr;
        else if sprite_index == kid_run_2_spr sprite_index = kid_idle_2_spr;
        else if sprite_index == kid_run_3_spr sprite_index = kid_idle_3_spr;
        else if sprite_index == kid_run_4_spr sprite_index = kid_idle_4_spr;
        else if sprite_index == kid_run_5_spr sprite_index = kid_idle_5_spr;
        else if sprite_index == kid_run_6_spr sprite_index = kid_idle_6_spr;
        else if sprite_index == kid_run_7_spr sprite_index = kid_idle_7_spr;
    
    
        }
    if xDir = 1 &amp;&amp; yDir = 0{
        image_speed = 1
        sprite_index = kid_run_0_spr
        } 
    if xDir = 0 &amp;&amp; yDir = 1{
        image_speed = 1
        sprite_index = kid_run_6_spr
        }
    if xDir = 1 &amp;&amp; yDir = 1{
        image_speed = 1
        sprite_index = kid_run_7_spr
        } 
    if xDir = -1 &amp;&amp; yDir = 0{
        image_speed = 1
        sprite_index = kid_run_4_spr
        } 
    if xDir = 0 &amp;&amp; yDir = -1{
        image_speed = 1
        sprite_index = kid_run_2_spr
        } 
    if xDir = -1 &amp;&amp; yDir = -1{
        image_speed = 1
        sprite_index = kid_run_3_spr
        } 
    if xDir = -1 &amp;&amp; yDir = 1{
        image_speed = 1
        sprite_index = kid_run_5_spr
        } 
    if xDir = 1 &amp;&amp; yDir = -1{
        image_speed = 1
        sprite_index = kid_run_1_spr
        } 
    
        
    
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
