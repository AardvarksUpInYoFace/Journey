<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Variables

// Movement Variables

h_spd = 0; // horizontal speed
v_spd = 0; // vertical speed

h_counter = 0; // used to store excess h_spd for smoothing
v_counter = 0;

h_col = 5; // horizontal bounding box
v_col = -12; // upwards vertical bounding box (downwards is 0)

h_acc = 0.55; // 0.15
v_acc = 0.55;

d_acc = 0.25 // de acceleration

h_spd_aim = 6;
h_spd_max = 12.5; // 1.5

h_spd_aim_c = 6
v_spd_aim_c = 6

v_spd_aim = 6;
v_spd_max = 12.5;

walk_counter = 0; // for audio




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement End

if(!pause){

var h, v;

h_counter += h_spd;
v_counter += v_spd;

h = round(h_counter);
v = round(v_counter);

h_counter -= h;
v_counter -= v;

x+=h*2
y+=v


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement


xDir = key_right - key_left;
yDir = key_down - key_up;

h_dcc = abs(h_spd)/12
v_dcc = abs(v_spd)/12

  if((xDir == 0 &amp;&amp; yDir == 0)){ 
    h_spd = f_approach(h_spd, 0, h_dcc); 
    v_spd = f_approach(v_spd, 0, v_dcc);
    }
  
  if (xDir != 0 &amp;&amp; yDir != 0){ // if two axis are in use
      //horizontal movement  
      
      h_spd_aim = h_spd_aim_c 
      v_spd_aim = v_spd_aim_c

      h_spd = f_approach(h_spd, xDir*h_spd_aim, h_acc);
 // vertical movement 

      v_spd = f_approach(v_spd, yDir*v_spd_aim, v_acc);
  }
  
  if(xDir != 0 &amp;&amp; yDir == 0){// only one axis in use
  
    h_spd_aim = h_spd_aim_c *1.4
    v_spd_aim = v_spd_aim_c *1.4
  

      h_spd = f_approach(h_spd, xDir*h_spd_aim, h_acc);

    v_spd = f_approach(v_spd, 0, v_dcc);
  
  }
  if(yDir != 0 &amp;&amp; xDir == 0){
  
    h_spd_aim = h_spd_aim_c *1.4
    v_spd_aim = v_spd_aim_c *1.4
    

      v_spd = f_approach(v_spd, yDir*v_spd_aim, v_acc);

    h_spd = f_approach(h_spd, 0, h_dcc); 
  }

    
    
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// vertical collision

if(abs(v_spd)&gt;0.5){
  /*if(!on_ground){
  
    f_player_squeeze(1-abs(h_spd)*0.07,1+abs(h_spd)*0.07);
  
  }*/
} 

v_spd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// horizontal collision

if(abs(h_spd)&gt;0.5){
  /*if(!on_ground){
  
    f_player_squeeze(1-abs(h_spd)*0.07,1+abs(h_spd)*0.07);
  
  }*/
} 

h_spd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
