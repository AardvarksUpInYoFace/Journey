<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>kid_idle_4_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_moves</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Variables

image_xscale = 3*image_xscale // because I am an idiot ;)
image_yscale = 3*image_yscale

xDir = 0;
yDir = 0;

speeed = 3;
speeed_init = 3;
hp = 3;

// state machine variables
hit = false;
rolling = false;
attacking = false;
walking = false;

// fighting variables?

immune = false;




/* defunct for now


walk_counter = 0; // for audio



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>immune</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rolling</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement End

if walking or rolling{ // the parametres just keep stacking up -_-

if f_j &gt; 0 &amp;&amp;  f_j &lt; obj_control.map_size_n &amp;&amp; f_i &lt; obj_control.map_size_n &amp;&amp;  f_i &gt; 0 {

 if obj_control.grid[f_i,f_j] = 1{

x += 2*xDir*speeed
y += yDir*speeed

}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement

// Player Mapping
f_coord_get(speeed)


/*

// starting work on the state machine

priority from top to bottom

    taking damage --&gt; hit
    rolling --------&gt; rolling
    attacking ------&gt; attacking
    walking --------&gt; walking
    idle -----------&gt; !walking

*/


 

xDir = key_right - key_left;
yDir = key_down - key_up;

if (xDir != 0 &amp;&amp; yDir != 0) speeed = speeed_init/1.4
else speeed = speeed_init

roll = key_A_p

if hit {

// run hit script with hit variables

}

if roll == 1 &amp;&amp; !rolling{
     rolling = true 
     immune = true
     alarm[7] = 22
     alarm[4] = 22    
     speeed_init = 7
     }
     
if !rolling speeed_init = 3;

if attacking {

// run attack script / need to define what is an attack ( do we oerlap over some of the roll frames
// would certainly feel better to play

}

if !attacking &amp;&amp; abs(xDir) + abs(yDir) != 0 {

    walking = true;
    }

else walking = false;












/*
  if((xDir == 0 &amp;&amp; yDir == 0)){ 
    h_spd = f_approach(h_spd, 0, h_dcc); 
    v_spd = f_approach(v_spd, 0, v_dcc);
    }
  
  if (xDir != 0 &amp;&amp; yDir != 0){ // if two axis are in use
      //horizontal movement  
      
      h_spd_aim = h_spd_aim_c 
      v_spd_aim = v_spd_aim_c

      h_spd = f_approach(h_spd, xDir*h_spd_aim, h_acc);
 // vertical movement 

      v_spd = f_approach(v_spd, yDir*v_spd_aim, v_acc);
  }
  
  if(xDir != 0 &amp;&amp; yDir == 0){// only one axis in use
  
    h_spd_aim = h_spd_aim_c *1.4
    v_spd_aim = v_spd_aim_c *1.4
  

      h_spd = f_approach(h_spd, xDir*h_spd_aim, h_acc);

    v_spd = f_approach(v_spd, 0, v_dcc);
  
  }
  if(yDir != 0 &amp;&amp; xDir == 0){
  
    h_spd_aim = h_spd_aim_c *1.4
    v_spd_aim = v_spd_aim_c *1.4
    

      v_spd = f_approach(v_spd, yDir*v_spd_aim, v_acc);

    h_spd = f_approach(h_spd, 0, h_dcc); 
  }

    
    
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// anim

    if hit {
            // hit animations go here
            
            }


    else if rolling{
    
            //rolling animations go here
    
                }
    
    else if attacking {
    
               // lots of different attack animations go here much more logic, maybe sepereate more?     
                    }
    
    else if walking{
    
    if xDir = 1 &amp;&amp; yDir = 0{
        image_speed = 1
        sprite_index = kid_run_0_spr
        } 
    if xDir = 0 &amp;&amp; yDir = 1{
        image_speed = 1
        sprite_index = kid_run_6_spr
        }
    if xDir = 1 &amp;&amp; yDir = 1{
        image_speed = 1
        sprite_index = kid_run_7_spr
        } 
    if xDir = -1 &amp;&amp; yDir = 0{
        image_speed = 1
        sprite_index = kid_run_4_spr
        } 
    if xDir = 0 &amp;&amp; yDir = -1{
        image_speed = 1
        sprite_index = kid_run_2_spr
        } 
    if xDir = -1 &amp;&amp; yDir = -1{
        image_speed = 1
        sprite_index = kid_run_3_spr
        } 
    if xDir = -1 &amp;&amp; yDir = 1{
        image_speed = 1
        sprite_index = kid_run_5_spr
        } 
    if xDir = 1 &amp;&amp; yDir = -1{
        image_speed = 1
        sprite_index = kid_run_1_spr
        } 
    }
    
    else {
    
            if image_index == 0 image_speed = 1;
        else if image_index == 19 image_speed = -1;
        
        
        xDir_f = dir_right  - dir_left
        yDir_f = dir_down - dir_up
    
        if xDir_f == 1 &amp;&amp; yDir_f == 0  sprite_index = kid_idle_0_spr;
        else if xDir_f == 1 &amp;&amp; yDir_f == -1 sprite_index = kid_idle_1_spr;
        else if xDir_f == 0 &amp;&amp; yDir_f == -1 sprite_index = kid_idle_2_spr;
        else if xDir_f == -1 &amp;&amp; yDir_f == -1 sprite_index = kid_idle_3_spr;
        else if xDir_f == -1 &amp;&amp; yDir_f == 0 sprite_index = kid_idle_4_spr;
        else if xDir_f == -1 &amp;&amp; yDir_f == 1 sprite_index = kid_idle_5_spr;
        else if xDir_f == 0 &amp;&amp; yDir_f == 1 sprite_index = kid_idle_6_spr;
        else if xDir_f == 1 &amp;&amp; yDir_f == 1 sprite_index = kid_idle_7_spr;
    
    
        }
    
        
    
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fighing???


// when press x or left mouse click
// execute fighting script
// doing attack animation in direction? (currently facing for gamepad, mouse location for keyboard+mouse
//if enemy hit, do the damage


// we need life for all alive things // we has life! 
// need damage...
    
/*
if key_X_p or key_Y_p attacking = true;

if attacking {

//which direction are we facing?
    

// what kind of attack are we doing
    if key_X_p {
    
                switch (sprite_index){
                
                case kid_run_0_spr:
                // run logic for animation 0 attack X
                /*
                    e.g.
                        // set collision mask and animation
                        mask_index = attack_X_0_mask
                        
                        switch (attack_counter){
                        
                        case 1: sprite_index = attack_X_0_1
                                break;
                        case 2: sprite_index = attack_X_0_2
                                break;
                        case 3: sprite_index = attack_X_0_3
                                break;
                                
                        // set attack variables
                        image_speed = 1;
                        attack_counter += 1
                        alarm[3] = 20 ; reset attack counter and reset attacking to false too        
                        
                                
                       add some pixels to x and y depending on facing the right direction
                        x += 2*
                        y += yDir
                        
                       
                        
                *//*
                break;
                case kid_run_1_spr:
                
                break;
                case kid_run_2_spr:
                break;
                case kid_run_3_spr:
                break;
                case kid_run_4_spr:
                break;
                case kid_run_5_spr:
                break;
                case kid_run_6_spr:
                break;
                case kid_run_7_spr:
                break;
    
                }
                
                
    else if key_Y_p 
    //else if....

immune = true; // can't be hit whilst attacking






}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// damage test heirachy


f_player_damage(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
