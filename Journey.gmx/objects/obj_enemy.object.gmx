<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_orb1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_moves</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup variables more...?

xDir = 0;
yDir = 0;

speeed = 1;

f_i = 0;
f_j = 0;

/* some advice for safekeeping

Separate the AI into layers: strategy, tactics and control. 
Strategy deals with long-term goals and desires. 
Tactics deals with moment-to-moment decision-making. 
Control deals with frame-by-frame control over the AI avatar.

if player seen, get into attacking range of the player(what movement pattern to do that)
once in attacking range, "circle" player (what pattern?)
add attack to stack of attacks (is there a priority)
when top of stack attack (how do that?)
go back to circling pattern

// statemachine variables

really breaks down into 3/4 states

idle
walking
(about to attack)
attacking

*/

player_seen = false;
player_reached = false;
waiting = false;
attacking = false;
attacked = false;
attack_ended = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attacked</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack_ended</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attacking</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// general movement

f_coord_get(speeed);

// have we seen the player code:

if collision_circle(x,y,5000,obj_player, false, true) &amp;&amp; !attacking{
    player_seen = true; // when the player is seen can be changed 
                        //therefore  right now not a necessary variable
                        // as the collision circle deals with sight pretty much
                        
    // now we need to get into range of player
    
    //look at the tile the player is on
    p_i = obj_player.i
    p_j = obj_player.j // defunct for this example enemy ai


// move towards player
if x != obj_player.x {
    if x &lt; obj_player.x xDir = 1
    if x &gt; obj_player.x xDir = -1
}

else xDir = 0;

if y != obj_player.y {
    if y &lt; obj_player.y yDir = 1
    if y &gt; obj_player.y yDir = -1
}

else yDir = 0;

    if collision_circle(x,y,20,obj_player, false,true){
            xDir = 0
            yDir = 0

            
            if !attacking {
                attacking = true
                alarm[0] = 60 // this alarm sets attacking back to false
                //state attacking 
                f_example_ai_attack() 
                // write some function that handles the attacking (overides anims etc)
        }
        }

}

if !collision_circle(x,y,50000,obj_player, false, true) &amp;&amp; !attacking {
 yDir = 0 
 xDir = 0 //would run idle code/anims if on screen doe
}
 
if f_j &gt; 0 &amp;&amp;  f_j &lt; obj_control.map_size_n &amp;&amp; f_i &lt; obj_control.map_size_n &amp;&amp;  f_i &gt; 0 {

 if obj_control.grid[f_i,f_j] = 1{

x += 2*xDir*speeed
y += yDir*speeed

}

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
